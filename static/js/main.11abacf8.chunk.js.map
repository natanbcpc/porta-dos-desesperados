{"version":3,"sources":["components/Graficos.js","components/Simulador.js","App.js","serviceWorker.js","index.js"],"names":["Graficos","react_default","a","createElement","es6","width","height","data","this","props","resultados","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","length","type","stroke","name","Component","Simulador","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","qtdSimulacoes","alterarQtdSimulacoes","bind","assertThisInitialized","simular","event","setState","target","value","simulacoesSempreTroca","simulacoesNuncaTroca","reducer","valorAcumulado","valorAtual","ganhou","i","portas","premiada","aberta","portaEscolhida","Math","floor","random","push","tentativa","vitoriasTrocando","reduce","vitoriasNaoTrocando","graficos","components_Graficos","className","id","onChange","onClick","App","href","components_Simulador","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11abacf8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nclass Graficos extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ResponsiveContainer width=\"100%\" height={600}>\n\t\t\t\t\t<LineChart\n\t\t\t\t\t\tdata={this.props.resultados}\n\t\t\t\t\t\tmargin={{\n\t\t\t\t\t\ttop: 5, right: 30, left: 20, bottom: 5,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t<XAxis dataKey=\"tentativa\" />\n\t\t\t\t\t\t<YAxis domain={[0, this.props.resultados.length]}/>\n\t\t\t\t\t\t<Tooltip />\n\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"vitoriasTrocando\" stroke=\"#8884d8\" name=\"Vitórias sempre trocando\" />\n\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"vitoriasNaoTrocando\" stroke=\"#82ca9d\" name=\"Vitórias nunca trocando\" />\n\t\t\t\t\t</LineChart>\n\t\t\t\t</ResponsiveContainer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Graficos;","import React, { Component } from 'react';\nimport Graficos from './Graficos.js';\n\nclass Simulador extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {qtdSimulacoes: 100};\n\t\n\t\tthis.alterarQtdSimulacoes = this.alterarQtdSimulacoes.bind(this);\n\t\tthis.simular = this.simular.bind(this);\n\t}\n\n\talterarQtdSimulacoes(event) {\n\t\tthis.setState({qtdSimulacoes: event.target.value});\n\t}\n\n\tsimular() {\n\t\tlet simulacoesSempreTroca = [], simulacoesNuncaTroca = [], resultados = [];\n\t\tlet reducer = (valorAcumulado, valorAtual) => valorAtual.ganhou ? ++valorAcumulado : valorAcumulado;\n\t\tfor (let i = 0; i < this.state.qtdSimulacoes; i++) {\n\t\t\tlet portas = [\n\t\t\t\t{ premiada : true, aberta : false },\n\t\t\t\t{ premiada : false, aberta : false },\n\t\t\t\t{ premiada : false, aberta : false }\n\t\t\t];\n\n\t\t\tlet portaEscolhida = Math.floor(Math.random() * 3);\n\n\t\t\tif (!portas[0].premiada && portaEscolhida !== 0) {\n\t\t\t\tportas[0].aberta = true;\n\t\t\t} else if (!portas[1].premiada && portaEscolhida !== 1) {\n\t\t\t\tportas[1].aberta = true;\n\t\t\t} else if (!portas[2].premiada && portaEscolhida !== 2) {\n\t\t\t\tportas[2].aberta = true;\n\t\t\t}\n\n\t\t\tsimulacoesSempreTroca.push({ ganhou : !portas[portaEscolhida].premiada });\n\t\t\tsimulacoesNuncaTroca.push({ ganhou : portas[portaEscolhida].premiada });\n\t\t\tresultados.push({\n\t\t\t\ttentativa : i + 1,\n\t\t\t\tvitoriasTrocando : simulacoesSempreTroca.reduce(reducer, 0),\n\t\t\t\tvitoriasNaoTrocando : simulacoesNuncaTroca.reduce(reducer, 0)\n\t\t\t});\n\t\t}\n\n\t\tthis.setState({ resultados });\n\t}\n  \n\trender() {\n\t\tlet graficos = this.state.resultados ?\n\t\t\t\t<Graficos resultados={this.state.resultados} />\n\t\t\t:\n\t\t\t\t'';\n\n\t\treturn (\n\t\t\t<div className=\"Simulador\">\n\t\t\t\t<p>Escolha uma quantidade de simulações</p>\n\t\t\t\t<input type=\"number\" id=\"qtdSimulacoes\" value={this.state.qtdSimulacoes} onChange={this.alterarQtdSimulacoes}></input>\n\t\t\t\t<button onClick={this.simular}>Simular</button>\n\n\t\t\t\t{graficos}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Simulador;","import React, { Component } from 'react';\nimport Simulador from './components/Simulador.js'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n\t\t<div className=\"App\">\n\t\t\t<h1>Porta dos Desesperados</h1>\n\t\t\t<p>Este é um site que simula o resultado do jogo <b>Porta dos Desesperados</b>, também conhecido como <a href=\"https://pt.wikipedia.org/wiki/Problema_de_Monty_Hall\"><b>Monty Hall</b></a></p>\n\t\t\t<Simulador />\n\t\t</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}